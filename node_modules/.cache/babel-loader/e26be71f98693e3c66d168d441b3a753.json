{"ast":null,"code":"var _jsxFileName = \"/home/jordinkolman/Documents/School/FrontEnd/betterprofessor/src/components/LogIn.js\";\nimport React from 'react';\nimport { withFormik, Form, Field } from 'formik';\nimport { Container, Segment, Header } from 'semantic-ui-react';\nimport { NavLink } from 'react-router-dom';\nimport axios from 'axios';\nimport * as Yup from 'yup';\n\nconst LogIn = ({\n  errors,\n  touched\n}) => {\n  return React.createElement(Container, {\n    className: \"Login-Page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Welcome Back Professor!\"), React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Please Log In to Continue\"), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Username: \"), React.createElement(Field, {\n    type: \"text\",\n    name: \"username\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), touched.username && errors.username && React.createElement(Segment, {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, errors.username), React.createElement(Segment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"Password: \"), React.createElement(Field, {\n    type: \"password\",\n    name: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), touched.password && errors.password && React.createElement(Segment, {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, errors.password), React.createElement(\"button\", {\n    className: \"form-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Log In\")), React.createElement(Container, {\n    className: \"signup-link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Don't have an account?\"), React.createElement(NavLink, {\n    to: \"/signup\",\n    style: {\n      textDecoration: 'none',\n      color: '#c42847',\n      fontSize: '1.3rem',\n      margin: '5px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Sign Up\")));\n};\n\nconst FormikLogInForm = withFormik({\n  mapPropsToValues(values) {\n    return {\n      username: values.username || '',\n      password: values.password || ''\n    };\n  },\n\n  //=====VALIDATION SCHEMA=====\n  validationSchema: Yup.object().shape({\n    username: Yup.string().required('Please enter a valid username'),\n    password: Yup.string().required('Please enter a valid password')\n  }),\n\n  //=====END OF VALIDATION SCHEMA=====\n  handleSubmit(values, {\n    setStatus,\n    resetForm\n  }) {\n    axios.post('https://betterprofessor.herokuapp.com/api/login', values).then(res => {\n      console.log('HTTP POST Response: ', res);\n      setStatus(res.data);\n      resetForm();\n    });\n  }\n\n})(LogIn);\nexport default FormikLogInForm;","map":{"version":3,"sources":["/home/jordinkolman/Documents/School/FrontEnd/betterprofessor/src/components/LogIn.js"],"names":["React","withFormik","Form","Field","Container","Segment","Header","NavLink","axios","Yup","LogIn","errors","touched","username","password","textDecoration","color","fontSize","margin","FormikLogInForm","mapPropsToValues","values","validationSchema","object","shape","string","required","handleSubmit","setStatus","resetForm","post","then","res","console","log","data"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withFormik, Form, Field } from 'formik'\nimport { Container, Segment, Header } from 'semantic-ui-react'\nimport { NavLink } from 'react-router-dom'\nimport axios from 'axios'\nimport * as Yup from 'yup'\n\nconst LogIn = ({ errors, touched }) => {\n\n\n\n    return (\n        <Container className = 'Login-Page'>\n            <Header>Welcome Back Professor!</Header>\n            <Header>Please Log In to Continue</Header>\n            <Form>\n                <Segment>Username: </Segment>\n                <Field type='text' name='username'/>\n                {touched.username && errors.username && (\n                    <Segment className = 'error'>{errors.username}</Segment>\n                )}\n                <Segment>Password: </Segment>\n                <Field type='password' name='password'/>\n                {touched.password && errors.password && (\n                    <Segment className='error'>{errors.password}</Segment>\n                )}\n                <button className='form-button'>Log In</button>\n            </Form>\n            <Container className='signup-link'>\n      <Segment>Don't have an account?</Segment>\n      <NavLink to='/signup' style={{textDecoration: 'none', color: '#c42847', fontSize: '1.3rem', margin: '5px'}}>Sign Up</NavLink>\n      </Container>\n        </Container>\n    )\n}\n\nconst FormikLogInForm = withFormik({\n    mapPropsToValues(values) {\n        return {\n            username: values.username || '',\n            password: values.password || ''\n        }\n    },\n    //=====VALIDATION SCHEMA=====\n    validationSchema: Yup.object().shape({\n        username: Yup.string()\n        .required('Please enter a valid username'),\n        password: Yup.string()\n        .required('Please enter a valid password')\n    }),\n    //=====END OF VALIDATION SCHEMA=====\n    handleSubmit(values, { setStatus, resetForm }) {\n        axios.post('https://betterprofessor.herokuapp.com/api/login', values).then(res => {\n            console.log('HTTP POST Response: ', res);\n            setStatus(res.data);\n            resetForm();\n        })\n    },\n})(LogIn)\n\nexport default FormikLogInForm"]},"metadata":{},"sourceType":"module"}